{"version":3,"sources":["utils.ts","Duplicate.tsx","Generator.tsx","Validator.tsx","Details.tsx","ValidatorWizard.tsx","ValidatorInput.tsx","App.tsx","index.tsx"],"names":["FALLBACK_FORMAT","parser","SwiftParser","JSON","stringify","patterns","useAccountInput","initialState","useState","accounts","setAccounts","value","handleChange","event","split","map","line","accountDetails","fundAccount","slice","account","fund","nostro","parseAccounts","target","tryParse","lines","replace","block1","block2","block3","block4","join","trim","parse","e","message","getAccountNumberFromFin","ast","find","includes","findTypes","json","type","option","qualifier","details","filter","element","findType","renderDate","dateString","date","moment","format","fromNow","renderFloat","floatSting","precision","parseFloat","toFixed","renderCurrency","amount","currency","renderDuplicateDetails","duplicateValues","index","valueDate","exoticCurr","usdCurr","className","key","Date","Amount","renderRow","a","swifts","mappedSwifts","duplicatedOrders","order","swift","isEqual","length","duplicateDetected","isDuplicate","Duplicate","props","Container","Row","Badge","pill","variant","Table","striped","bordered","hover","mappedValues","data","isKey","dataField","dataSort","renderDetails","DuplicateCheck","state","setState","Col","Form","Group","controlId","Control","placeholder","as","rows","onChange","duplicateCheck","then","result","Generator","templates","orders","transactions","rawTemplates","rawOrders","generateTransaction","accountNumber","matchingAccount","mapping","matchingTemplateIndex","findIndex","template","nostoAccount","fundAccountNumber","nostoAccountNumber","tradeDate","orderValueDate","isAfter","generateTradeDate","sellAmount","buyAmount","rate","transaction","Rate","generateTransactions","language","style","solarizedlight","darcula","renderGeneratedTransactions","Validator","renderType","label","valueLeft","valueRight","valid","badgeVariant","data-label","xs","renderAmountValidator","orderValue","transactionValue","validation","validateAccount","orderAccount","matchType","orderAccountNumber","Fragment","orderValueRaw","orderJSON","transactionValueRaw","transactionJSON","validateNettAmount","validatePstaAmount","validateValueDate","correctOrderValueDate","validateTradeDate","orderRateRaw","rateRaw","buyRaw","sellRaw","buy","sell","orderRate","validateRate","validateFundAccount","nostroAccount","validateNostroAccount","TYPES","Dates","Currency","FIELDS_DESCRIPTION","TOOLTIPS","PAYD","VALU","EARL","FXDT","ENTL","TXFR","NETT","Details","OverlayTrigger","placement","overlay","Tooltip","id","renderIdentification","item","i","renderCustomField","name","mapper","parsedSwift","field","renderField","types","renderAccountsNumber","renderCurrencyField","renderDates","renderRate","undefined","ValidatorWizard","ordersRaw","currentOrderRaw","currentOrder","orderRaw","transactionRaw","currentOrderIndex","refDate","number","validOrders","setValidOrders","invalidOrders","setInvalidOrders","onTransactionChange","currentTarget","onOrdersChange","onRefChange","generateWizard","clearWizard","onOrderClick","orderIndex","markAsInvalid","newInvalidOrders","newValidOrders","push","Button","onClick","ListGroup","buyAST","sellAST","active","Item","action","aria-label","role","duotoneDark","toString","ValidatorInput","App","Navbar","bg","Brand","href","Collapse","Nav","Link","Text","process","Tabs","defaultActiveKey","Tab","eventKey","title","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ef584d7c.chunk.js","sourcesContent":["import patterns from \"./metadata/patterns.json\";\nimport React, { useState } from \"react\";\nimport SwiftParser from \"swift-mock/lib/swiftParser\";\nimport moment from \"moment\";\nimport \"moment/locale/pl\";\n\nconst FALLBACK_FORMAT =\n  \"F01TESTBIC12XXX0360105154\\nO5641057130214TESTBIC34XXX26264938281302141757N\\n108:2RDRQDHM3WO\";\nconst parser = new SwiftParser(JSON.stringify(patterns));\n\ntype EventHandler = (event: React.FormEvent<HTMLInputElement>) => void;\n\nexport interface ParsedSwift {\n  block1: Block1;\n  block2: Block2;\n  block3: Block3;\n  block4: Block4[];\n}\n\nexport interface Block1 {\n  blockId: number;\n  content: string;\n  applicationId: string;\n  serviceId: string;\n  receivingLtId: string;\n  sessionNumber: string;\n  sequenceNumber: string;\n}\n\nexport interface Block2 {\n  content: string;\n  blockId: number;\n  direction: string;\n  msgType: string;\n  inputTime: string;\n  inputDate: string;\n  bic: string;\n  sessionNumber: string;\n  sequenceNumber: string;\n  outputDate: string;\n  outputTime: string;\n  prio: string;\n}\n\nexport interface Block3 {\n  \"108\": string;\n}\n\nexport interface Block4 {\n  type: string;\n  option: string;\n  fieldValue: string;\n  content: string;\n  ast: SwiftAST;\n}\n\nexport interface SwiftAST {\n  Qualifier?: string;\n  Reference?: string;\n  Function?: string;\n  Indicator?: string;\n  Date?: string;\n  Time?: string;\n  Value?: string;\n  \"Account Number\"?: string;\n  \"Data Source Scheme\"?: string;\n  \"Place Code\"?: string;\n  \"Currency Code\"?: string;\n  \"Quantity Type Code\"?: string;\n  Balance?: string;\n  \"Number Identification\"?: string;\n  Quantity?: string;\n  Amount?: string;\n  \"Amount Type Code\"?: string;\n  Price?: string;\n  \"First Currency Code\"?: string;\n  \"Second Currency Code\"?: string;\n  Rate?: string;\n  \"Party Identification\"?: string;\n  Currency?: string;\n  \"Identifier Code\"?: string;\n}\n\nexport interface AccountDetails {\n  account: string;\n  fund: string;\n  nostro: string;\n}\n\nexport interface AccountHook {\n  value: AccountDetails[];\n  handleChange: EventHandler;\n}\n\nexport function parseAccounts(value: string): AccountDetails[] {\n  const lines = value.split(\"\\n\");\n  return lines.map((line: string) => {\n    const accountDetails = line.split(\",\");\n    const fundAccount = (accountDetails[1] || \"\").slice(0, -5) + \"5-000\";\n    return {\n      account: accountDetails[0],\n      fund: fundAccount,\n      nostro: accountDetails[2]\n    };\n  });\n}\n\nexport function useAccountInput(initialState: AccountDetails[]): AccountHook {\n  const [accounts, setAccounts] = useState<AccountDetails[]>(initialState);\n\n  function handleChange(event: React.FormEvent<HTMLInputElement>): void {\n    const target = event.target as HTMLInputElement;\n    const value = target.value;\n    const accounts = parseAccounts(value);\n\n    setAccounts(accounts);\n  }\n\n  return {\n    value: accounts,\n    handleChange\n  };\n}\n\nexport function tryParse(value: string): ParsedSwift {\n  value = value.replace(/\\n{2,}/g, \"\\n\");\n  value = value.replace(/ :/g, \"\\n:\");\n\n  const lines = value.split(\"\\n\");\n  const block1 = \"{1:\" + lines[0] + \"}\";\n  const block2 = \"{2:\" + lines[1] + \"}\";\n  const block3 = \"{3:{\" + lines[2] + \"}}\";\n  const block4 =\n    \"{4:\\n\" +\n    lines\n      .slice(3)\n      .join(\"\\n\")\n      .replace(\"\\n-\", \"\")\n      .trim() +\n    \"\\n-}\";\n\n  return parser.parse(block1 + block2 + block3 + block4);\n}\n\nexport function parse(value: string): ParsedSwift {\n  try {\n    return parser.parse(value);\n  } catch (e) {\n    try {\n      return tryParse(value);\n    } catch (e) {\n      try {\n        return tryParse(FALLBACK_FORMAT + value);\n      } catch (e) {\n        try {\n          return tryParse(FALLBACK_FORMAT + \":\\n\" + value);\n        } catch (e) {\n          return e.message;\n        }\n      }\n    }\n  }\n}\n\nexport function getAccountNumberFromFin(ast: SwiftAST): string {\n  const identify = ast[\"Party Identification\"];\n  const partyIdentification =\n    (identify || \"\").split(\"\\n\").find((line: string) => {\n      return line.includes(\"ACCT/\");\n    }) || \"\";\n  return partyIdentification.split(\"/\")[2];\n}\n\nexport function findTypes(\n  json: ParsedSwift,\n  type: string,\n  option?: string,\n  qualifier?: string\n): Block4[] {\n  try {\n    const details = json[\"block4\"];\n    if (details) {\n      return (\n        details\n          .filter((element: Block4) => {\n            return element.type === type && element.option === option;\n          })\n          .filter((element: Block4) => {\n            if (qualifier) {\n              return element.ast[\"Qualifier\"] === qualifier;\n            } else {\n              return true;\n            }\n          }) || []\n      );\n    } else {\n      return [];\n    }\n  } catch (e) {\n    return [];\n  }\n}\n\nexport function findType(\n  json: ParsedSwift,\n  type: string,\n  option?: string,\n  qualifier?: string\n): Block4 | undefined {\n  return findTypes(json, type, option, qualifier)[0];\n}\n\nexport function renderDate(dateString?: string): moment.Moment | string {\n  try {\n    const date = moment(dateString, \"YYYYMMDD\");\n    return date.format(\"DD/MM/YYYY\") + \" (\" + date.fromNow() + \")\";\n  } catch (e) {\n    return \"Unable to render date\";\n  }\n}\n\nexport function renderFloat(\n  floatSting: string | undefined,\n  precision = 2\n): string {\n  try {\n    return parseFloat((floatSting || \"\").replace(\",\", \".\")).toFixed(precision);\n  } catch (e) {\n    return \"Unable to render number\";\n  }\n}\n\nexport function renderCurrency(amount?: string, currency?: string): string {\n  try {\n    return renderFloat(amount) + \" \" + currency;\n  } catch (e) {\n    return \"Unable to render currency\";\n  }\n}\n","import React, { useState } from \"react\";\nimport \"./assets/css/App.css\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Table from \"react-bootstrap/Table\";\nimport Row from \"react-bootstrap/Row\";\nimport Container from \"react-bootstrap/Container\";\nimport {\n  BootstrapTable,\n  BootstrapTableProps,\n  TableHeaderColumn\n} from \"react-bootstrap-table\";\nimport { Block4, findType, parse, ParsedSwift } from \"./utils\";\nimport { Col, Form } from \"react-bootstrap\";\nimport { isEqual } from \"underscore\";\n\ninterface TransactionDetails extends Readonly<BootstrapTableProps> {\n  valueDate: string;\n  exoticCurr: string;\n  usdCurr: string;\n}\n\ninterface DuplicateProps {\n  mappedSwifts: ParsedSwift[];\n  duplicateValues: ParsedSwift[];\n  isDuplicate: boolean;\n}\n\nfunction renderDetails(mappedSwifts: ParsedSwift[]): JSX.Element {\n  const mappedValues: TransactionDetails[] = mappedSwifts.map(\n    (value: ParsedSwift) => {\n      const valueDate = findType(value, \"98\", \"A\", \"VALU\");\n      const exoticCurr = findType(value, \"19\", \"B\", \"NETT\");\n      const usdCurr = findType(value, \"19\", \"B\", \"PSTA\");\n\n      if (valueDate && exoticCurr && usdCurr) {\n        return {\n          valueDate: valueDate.ast.Date,\n          exoticCurr:\n            exoticCurr.ast.Amount + \" \" + exoticCurr.ast[\"Currency Code\"],\n          usdCurr: usdCurr.ast.Amount + \" \" + usdCurr.ast[\"Currency Code\"]\n        } as TransactionDetails;\n      } else {\n        return {\n          valueDate: \"Unable to display\",\n          exoticCurr: \"Unable to display\",\n          usdCurr: \"Unable to display\"\n        } as TransactionDetails;\n      }\n    }\n  );\n\n  return (\n    <BootstrapTable data={mappedValues} striped hover>\n      <TableHeaderColumn isKey dataField=\"valueDate\" dataSort={true}>\n        Value Date\n      </TableHeaderColumn>\n      <TableHeaderColumn dataField=\"exoticCurr\" dataSort={true}>\n        Exotic Currency\n      </TableHeaderColumn>\n      <TableHeaderColumn dataField=\"usdCurr\" dataSort={true}>\n        USD Currency\n      </TableHeaderColumn>\n    </BootstrapTable>\n  );\n}\n\nfunction renderRow(\n  valueDate: Block4,\n  exoticCurr: Block4,\n  usdCurr: Block4,\n  index: number\n): JSX.Element {\n  return (\n    <tr className=\"singleDuplicate\" key={index}>\n      <td>{valueDate.ast.Date}</td>\n      <td>\n        {exoticCurr.ast.Amount} {exoticCurr.ast[\"Currency Code\"]}\n      </td>\n      <td>\n        {usdCurr.ast.Amount} {usdCurr.ast[\"Currency Code\"]}\n      </td>\n    </tr>\n  );\n}\n\nfunction renderDuplicateDetails(duplicateValues: ParsedSwift[]): JSX.Element[] {\n  return duplicateValues.map((value: ParsedSwift, index: number) => {\n    const valueDate = findType(value, \"98\", \"A\", \"VALU\");\n    const exoticCurr = findType(value, \"19\", \"B\", \"NETT\");\n    const usdCurr = findType(value, \"19\", \"B\", \"PSTA\");\n\n    if (valueDate && exoticCurr && usdCurr) {\n      return renderRow(valueDate, exoticCurr, usdCurr, index);\n    } else {\n      return (\n        <tr>\n          <td>Unable to display</td>\n          <td>Unable to display</td>\n          <td>Unable to display</td>\n        </tr>\n      );\n    }\n  });\n}\n\nfunction badge(isDuplicate: boolean): JSX.Element {\n  return isDuplicate ? (\n    <Badge pill variant=\"danger\">\n      {\" \"}\n      Is duplicate{\" \"}\n    </Badge>\n  ) : (\n    <Badge pill variant=\"success\">\n      {\" \"}\n      Is not duplicate{\" \"}\n    </Badge>\n  );\n}\n\nasync function duplicateCheck(\n  event: React.FormEvent<HTMLInputElement>\n): Promise<DuplicateProps> {\n  const target = event.target as HTMLInputElement;\n  const swifts = (target.value || \"\").split(/\\n{2,}/);\n  const mappedSwifts = swifts.map(parse);\n  const duplicatedOrders = mappedSwifts.filter((order: ParsedSwift) => {\n    return (\n      mappedSwifts.filter((swift: ParsedSwift) => {\n        return isEqual(swift, order);\n      }).length > 1\n    );\n  });\n  const duplicateDetected = duplicatedOrders.length > 0;\n\n  return {\n    isDuplicate: duplicateDetected,\n    duplicateValues: duplicatedOrders,\n    mappedSwifts: mappedSwifts\n  };\n}\n\nfunction Duplicate(props: DuplicateProps): JSX.Element {\n  return (\n    <Container>\n      <Row>{badge(props.isDuplicate)}</Row>\n      <Row>\n        <h4>Possible duplicates</h4>\n      </Row>\n      <Row>\n        <Table className=\"mt-2\" striped bordered hover>\n          <thead>\n            <tr>\n              <th>Value date</th>\n              <th>Exotic currency amount</th>\n              <th>USD amount</th>\n            </tr>\n          </thead>\n          <tbody className=\"duplicatesList\">\n            {renderDuplicateDetails(props.duplicateValues)}\n          </tbody>\n        </Table>\n      </Row>\n      <Row>\n        <h4>All swifts</h4>\n      </Row>\n      <Row>{renderDetails(props.mappedSwifts)}</Row>\n    </Container>\n  );\n}\n\nexport function DuplicateCheck(): JSX.Element {\n  const [state, setState] = useState<DuplicateProps>({\n    isDuplicate: false,\n    duplicateValues: [],\n    mappedSwifts: []\n  });\n\n  function updateDuplicates(event: React.FormEvent<HTMLInputElement>): void {\n    duplicateCheck(event).then(result => {\n      setState(result);\n    });\n  }\n\n  return (\n    <Container className=\"mt-2\">\n      <Row>\n        <Col>\n          <Form>\n            <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n              <Form.Control\n                className=\"ordersList\"\n                placeholder=\"Orders list\"\n                as=\"textarea\"\n                rows=\"10\"\n                onChange={updateDuplicates}\n              />\n            </Form.Group>\n          </Form>\n        </Col>\n      </Row>\n      <Row>\n        <Duplicate {...state} />\n      </Row>\n    </Container>\n  );\n}\n\nexport default DuplicateCheck;\n","import React, { useState } from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport \"moment/locale/pl\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport {\n  AccountDetails,\n  Block4,\n  findTypes,\n  getAccountNumberFromFin,\n  parse,\n  ParsedSwift,\n  useAccountInput\n} from \"./utils\";\nimport moment from \"moment\";\nimport JSONPretty from \"react-json-pretty\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport {\n  darcula,\n  solarizedlight\n} from \"react-syntax-highlighter/dist/esm/styles/prism\";\n\ninterface GeneratorState {\n  templates: ParsedSwift[];\n  orders: ParsedSwift[];\n  transactions: string[];\n  rawTemplates: string[];\n  rawOrders: string[];\n}\n\nfunction Generator(): JSX.Element {\n  const [state, setState] = useState<GeneratorState>({\n    templates: [],\n    orders: [],\n    transactions: [],\n    rawTemplates: [],\n    rawOrders: []\n  });\n\n  const accounts = useAccountInput([]);\n\n  function onOrderChange(event: React.FormEvent<HTMLInputElement>): void {\n    const target = event.target as HTMLInputElement;\n    const orders = (target.value || \"\").replace(/ :/g, \"\\n:\").split(/\\n{2,}/);\n    setState({ ...state, orders: orders.map(parse), rawOrders: orders });\n  }\n\n  function onTemplateChange(event: React.FormEvent<HTMLInputElement>): void {\n    const target = event.target as HTMLInputElement;\n    const templates = (target.value || \"\").split(/\\n{2,}/);\n    setState({\n      ...state,\n      templates: templates.map(parse),\n      rawTemplates: templates\n    });\n  }\n\n  function generateTradeDate(date: Block4): Block4 {\n    const orderValueDate = moment(date.ast.Date, \"YYYYMMDD\");\n\n    if (!moment().isAfter(orderValueDate)) {\n      date.ast.Date = moment().format(\"YYYYMMDD\");\n    }\n\n    return date;\n  }\n\n  function generateTransaction(swift: ParsedSwift): string {\n    try {\n      const accountNumber =\n        findTypes(swift, \"97\", \"A\", \"SAFE\")[0].ast[\"Account Number\"] || \"\";\n      const matchingAccount = accounts.value.find((mapping: AccountDetails) => {\n        return accountNumber.includes(mapping.account);\n      });\n\n      if (!matchingAccount) {\n        return \"There was a problem with matching accounts\";\n      }\n\n      const matchingTemplateIndex = state.templates.findIndex(\n        (template: ParsedSwift) => {\n          const fundAccount = findTypes(template, \"83\", \"J\")[0];\n          const nostoAccount = findTypes(template, \"58\", \"J\")[0];\n          if (!fundAccount && !nostoAccount) {\n            return false;\n          }\n\n          const fundAccountNumber = getAccountNumberFromFin(fundAccount.ast);\n          const nostoAccountNumber = getAccountNumberFromFin(nostoAccount.ast);\n\n          return !!(\n            fundAccountNumber === matchingAccount.fund &&\n            nostoAccountNumber === matchingAccount.nostro\n          );\n        }\n      );\n\n      const matchingTemplate = state.templates[matchingTemplateIndex];\n\n      if (!matchingTemplate) {\n        return \"There was a problem with generating transaction\";\n      }\n\n      const valueDate = findTypes(swift, \"98\", \"A\", \"VALU\")[0];\n      const tradeDate = generateTradeDate(valueDate);\n      const sellAmount = findTypes(swift, \"19\", \"B\", \"NETT\")[0];\n      const buyAmount = findTypes(swift, \"19\", \"B\", \"PSTA\")[0];\n      const rate = findTypes(swift, \"92\", \"B\", \"EXCH\")[0];\n\n      let transaction = state.rawTemplates[matchingTemplateIndex].slice();\n\n      transaction = transaction.replace(\n        /30V:.*\\n/,\n        \"30V:\" + valueDate.ast.Date + \"\\n\"\n      );\n      transaction = transaction.replace(\n        /30T:.*\\n/,\n        \"30T:\" + tradeDate.ast.Date + \"\\n\"\n      );\n      transaction = transaction.replace(\n        /33B:.*\\n/,\n        \"33B:\" + sellAmount.ast[\"Currency Code\"] + sellAmount.ast.Amount + \"\\n\"\n      );\n      transaction = transaction.replace(\n        /32B:.*\\n/,\n        \"32B:\" + buyAmount.ast[\"Currency Code\"] + buyAmount.ast.Amount + \"\\n\"\n      );\n      transaction = transaction.replace(\n        /36:.*\\n/,\n        \"36:\" + rate.ast.Rate + \"\\n\"\n      );\n\n      return transaction;\n    } catch (e) {\n      return \"There was internal problem with transaction generation\";\n    }\n  }\n\n  function renderGeneratedTransactions(): JSX.Element[] {\n    const generateTransactions = state.orders.map(generateTransaction);\n\n    return state.rawOrders.map((order: string, index: number) => {\n      return (\n        <Row key={index}>\n          <Col>\n            <SyntaxHighlighter\n              className=\"copiedOrder\"\n              language=\"javascript\"\n              style={solarizedlight}\n            >\n              {order}\n            </SyntaxHighlighter>\n          </Col>\n          <Col>\n            <SyntaxHighlighter\n              className=\"generatedTransaction\"\n              language=\"javascript\"\n              style={darcula}\n            >\n              {generateTransactions[index]}\n            </SyntaxHighlighter>\n          </Col>\n        </Row>\n      );\n    });\n  }\n\n  return (\n    <Container className=\"my-2\">\n      <Row>\n        <Col>\n          <Form>\n            <Form.Group>\n              <Form.Control\n                placeholder=\"Orders\"\n                as=\"textarea\"\n                rows=\"5\"\n                onChange={onOrderChange}\n              />\n            </Form.Group>\n          </Form>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Form>\n            <Form.Group>\n              <Form.Control\n                placeholder=\"Accounts\"\n                as=\"textarea\"\n                rows=\"5\"\n                onChange={accounts.handleChange}\n              />\n            </Form.Group>\n          </Form>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Form>\n            <Form.Group>\n              <Form.Control\n                placeholder=\"Templates\"\n                as=\"textarea\"\n                rows=\"5\"\n                onChange={onTemplateChange}\n              />\n            </Form.Group>\n          </Form>\n        </Col>\n      </Row>\n      {renderGeneratedTransactions()}\n      <Row>\n        <h4>Transactions</h4>\n      </Row>\n      <Row>\n        <Col>\n          <JSONPretty data={state.transactions} />\n        </Col>\n      </Row>\n      <Row>\n        <h4>Orders</h4>\n      </Row>\n      <Row>\n        <Col>\n          <JSONPretty data={state.orders} />\n        </Col>\n      </Row>\n      <Row>\n        <h4>Templates</h4>\n      </Row>\n      <Row>\n        <Col>\n          <JSONPretty data={state.templates} />\n        </Col>\n      </Row>\n      <Row>\n        <h4>Accounts</h4>\n      </Row>\n      <Row>\n        <Col>\n          <JSONPretty data={accounts} />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default Generator;\n","import React from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Container from \"react-bootstrap/Container\";\nimport Badge from \"react-bootstrap/Badge\";\nimport moment, { Moment } from \"moment\";\nimport \"moment/locale/pl\";\nimport {\n  AccountDetails,\n  Block4,\n  findType,\n  getAccountNumberFromFin,\n  ParsedSwift,\n  SwiftAST\n} from \"./utils\";\n\nimport \"./assets/css/App.css\";\n\ninterface ValidatorProps {\n  orderJSON: ParsedSwift;\n  transactionJSON: ParsedSwift;\n  accounts: AccountDetails[];\n}\n\nfunction Validator(props: ValidatorProps): JSX.Element {\n  function renderType(\n    label: string,\n    valueLeft: string,\n    valueRight: string,\n    valid: boolean\n  ): JSX.Element {\n    const badgeVariant = valid ? \"success\" : \"danger\";\n\n    return (\n      <Container>\n        <Row data-label={label}>\n          <Col className=\"order\" xs={4}>\n            {valueLeft}\n          </Col>\n          <Col xs={4}>\n            <Badge variant={badgeVariant}>{label}</Badge>\n          </Col>\n          <Col className=\"transaction\" xs={4}>\n            {valueRight}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  function renderFloat(floatSting?: string, precision = 2): string {\n    return parseFloat((floatSting || \"\").replace(\",\", \".\")).toFixed(precision);\n  }\n\n  function renderCurrency(ast: SwiftAST): string {\n    return renderFloat(\n      (ast[\"Amount\"] || \"\") + \" \" + (ast[\"Currency\"] || ast[\"Currency Code\"])\n    );\n  }\n\n  function renderDate(date: Moment): string {\n    return date.format(\"DD/MM/YYYY\") + \" (\" + date.fromNow() + \")\";\n  }\n\n  function renderAmountValidator(\n    orderValue: SwiftAST,\n    transactionValue: SwiftAST,\n    label: string\n  ): JSX.Element {\n    const validation =\n      renderFloat(orderValue[\"Amount\"]) ===\n        renderFloat(transactionValue[\"Amount\"]) &&\n      orderValue[\"Currency Code\"] === transactionValue[\"Currency\"];\n    return renderType(\n      label,\n      renderCurrency(orderValue),\n      renderCurrency(transactionValue),\n      validation\n    );\n  }\n\n  function validateAccount(\n    account: Block4,\n    orderAccount: Block4,\n    matchType: \"nostro\" | \"fund\",\n    label: string\n  ): JSX.Element {\n    const accountNumber = getAccountNumberFromFin(account.ast);\n    const orderAccountNumber =\n      orderAccount.ast[\"Account Number\"] || \"Unknown account\";\n\n    const matchingAccount: AccountDetails = props.accounts.find(\n      (mapping: AccountDetails) => {\n        return orderAccountNumber.includes(mapping.account);\n      }\n    ) || {\n      account: \"Unknown number\",\n      fund: \"Unknown number\",\n      nostro: \"Unknown number\"\n    };\n\n    const validation: boolean = matchingAccount[matchType] === accountNumber;\n\n    return renderType(\n      label,\n      orderAccountNumber,\n      matchingAccount[matchType],\n      validation\n    );\n  }\n\n  function validateFundAccount(): JSX.Element | null {\n    const orderAccount = findType(props.orderJSON, \"97\", \"A\", \"SAFE\");\n    const fundAccount = findType(props.transactionJSON, \"83\", \"J\");\n\n    if (orderAccount && fundAccount) {\n      return validateAccount(\n        fundAccount,\n        orderAccount,\n        \"fund\",\n        \"Fund Account Number\"\n      );\n    } else {\n      return null;\n    }\n  }\n\n  function validateNostroAccount(): JSX.Element | null {\n    const orderAccount = findType(props.orderJSON, \"97\", \"A\", \"SAFE\");\n    const nostroAccount = findType(props.transactionJSON, \"58\", \"J\");\n\n    if (orderAccount && nostroAccount) {\n      return validateAccount(\n        nostroAccount,\n        orderAccount,\n        \"nostro\",\n        \"Nostro Account Number\"\n      );\n    } else {\n      return null;\n    }\n  }\n\n  function validateRate(): JSX.Element | undefined {\n    const orderRateRaw = findType(props.orderJSON, \"92\", \"B\", \"EXCH\");\n    const rateRaw = findType(props.transactionJSON, \"36\");\n    const buyRaw = findType(props.transactionJSON, \"32\", \"B\");\n    const sellRaw = findType(props.transactionJSON, \"33\", \"B\");\n\n    if (!rateRaw || !buyRaw || !sellRaw || !orderRateRaw) {\n      return;\n    }\n\n    const buy = parseFloat(buyRaw.ast[\"Amount\"] || \"0\") as number;\n    const sell = parseFloat(sellRaw.ast[\"Amount\"] || \"1\") as number;\n    const rate = renderFloat(rateRaw.ast[\"Rate\"] || \"\");\n    const orderRate = renderFloat(orderRateRaw.ast[\"Rate\"] || \"\");\n    const computedRate = (buy / sell).toFixed(2);\n\n    return renderType(\n      \"Rate\",\n      orderRate,\n      rate + \" (Calculated: \" + computedRate + \")\",\n      rate === orderRate\n    );\n  }\n\n  function validateTradeDate(): JSX.Element | undefined {\n    const orderValueRaw = findType(props.orderJSON, \"98\", \"A\", \"VALU\");\n    const transactionValueRaw = findType(props.transactionJSON, \"30\", \"T\");\n\n    if (!orderValueRaw || !transactionValueRaw) {\n      return;\n    }\n\n    const orderValue = orderValueRaw.ast;\n    const transactionValue = transactionValueRaw.ast;\n    const orderValueDate = moment(orderValue[\"Date\"], \"YYYYMMDD\");\n    let correctOrderValueDate = moment(orderValue[\"Date\"], \"YYYYMMDD\");\n\n    if (!moment().isAfter(orderValueDate)) {\n      correctOrderValueDate = moment();\n    }\n\n    const validation =\n      correctOrderValueDate.format(\"YYYYMMDD\") === transactionValue[\"Date\"];\n\n    return renderType(\n      \"Trade Date\",\n      renderDate(orderValueDate),\n      renderDate(correctOrderValueDate),\n      validation\n    );\n  }\n\n  function validateValueDate(): JSX.Element | undefined {\n    const orderValueRaw = findType(props.orderJSON, \"98\", \"A\", \"VALU\");\n    const transactionValueRaw = findType(props.transactionJSON, \"30\", \"V\");\n\n    if (!orderValueRaw || !transactionValueRaw) {\n      return;\n    }\n\n    const orderValue = orderValueRaw.ast;\n    const transactionValue = transactionValueRaw.ast;\n\n    const orderValueDate = moment(orderValue[\"Date\"], \"YYYYMMDD\");\n    const validation =\n      orderValueDate.format(\"YYYYMMDD\") === transactionValue[\"Date\"];\n\n    return renderType(\n      \"Value Date\",\n      renderDate(orderValueDate),\n      renderDate(moment(transactionValue[\"Date\"], \"YYYYMMDD\")),\n      validation\n    );\n  }\n\n  function validatePstaAmount(): JSX.Element | undefined {\n    const orderValueRaw = findType(props.orderJSON, \"19\", \"B\", \"PSTA\");\n    const transactionValueRaw = findType(props.transactionJSON, \"32\", \"B\");\n\n    if (!orderValueRaw || !transactionValueRaw) {\n      return;\n    }\n\n    const orderValue = orderValueRaw.ast;\n    const transactionValue = transactionValueRaw.ast;\n\n    return renderAmountValidator(\n      orderValue,\n      transactionValue,\n      \"Buy Currency Amount\"\n    );\n  }\n\n  function validateNettAmount(): JSX.Element | undefined {\n    const orderValueRaw = findType(props.orderJSON, \"19\", \"B\", \"NETT\");\n    const transactionValueRaw = findType(props.transactionJSON, \"33\", \"B\");\n\n    if (!orderValueRaw || !transactionValueRaw) {\n      return;\n    }\n\n    const orderValue = orderValueRaw.ast;\n    const transactionValue = transactionValueRaw.ast;\n\n    return renderAmountValidator(\n      orderValue,\n      transactionValue,\n      \"Sell Currency Amount\"\n    );\n  }\n  return (\n    <React.Fragment>\n      <Row className=\"center\">\n        <Col xs={4}>\n          <strong>What the order contains</strong>\n        </Col>\n        <Col xs={4}>\n          <Badge className=\"mr-sm-2\" variant=\"success\">\n            Valid\n          </Badge>\n          <Badge variant=\"danger\">Invalid</Badge>\n        </Col>\n        <Col xs={4}>\n          <strong>What it should be</strong>\n        </Col>\n      </Row>\n      <hr className=\"col-xs-12\" />\n      <Row>\n        {validateNettAmount()}\n        {validatePstaAmount()}\n        {validateValueDate()}\n        {validateTradeDate()}\n        {validateRate()}\n        {validateFundAccount()}\n        {validateNostroAccount()}\n      </Row>\n    </React.Fragment>\n  );\n}\n\nexport default Validator;\n","import React from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport moment, { Moment } from \"moment\";\nimport {\n  Block4,\n  findTypes,\n  getAccountNumberFromFin,\n  ParsedSwift,\n  renderCurrency,\n  renderDate,\n  renderFloat,\n  SwiftAST\n} from \"./utils\";\nimport \"moment/locale/pl\";\nimport \"./assets/css/App.css\";\n\ntype TypeMapperReturn = string | JSX.Element | JSX.Element[] | Moment;\ntype TypeMapper = (ast: SwiftAST) => TypeMapperReturn;\n\nconst TYPES = {\n  \"Account number\": { type: \"97\", option: \"A\" },\n  Dates: { type: \"98\", option: \"A\" },\n  Currency: { type: \"19\", option: \"B\" }\n};\n\nconst FIELDS_DESCRIPTION: { [id: string]: string } = {\n  \"20\": \"Sender's Reference\",\n  \"38J\": \"Client\",\n  \"83J\": \"Fund\",\n  \"30T\": \"Trade Date\",\n  \"30V\": \"Value Date\",\n  \"36\": \"Exchange Rate\",\n  \"32B\": \"Amount Bought\",\n  \"53A\": \"Delivery Agent\",\n  \"33B\": \"Amount Sold\",\n  \"58J\": \"Beneficiary Institution\",\n  \"92B\": \"Rate\"\n};\n\nconst TOOLTIPS: { [id: string]: string } = {\n  PAYD: \"Payment Date/Time\",\n  VALU: \"Value Date/Time\",\n  EARL: \"Earliest Payment Date/Time\",\n  FXDT: \"FX Rate Fixing Date/Time\",\n  ENTL: \"Entitled Amount\",\n  TXFR: \"Tax Free Amount\",\n  NETT: \"Net Cash Amount\"\n};\n\ninterface DetailsProps {\n  parsedSwift: ParsedSwift;\n}\n\nfunction Details(props: DetailsProps): JSX.Element {\n  function renderRate(ast: SwiftAST): string {\n    return (\n      ast[\"First Currency Code\"] +\n      \"/\" +\n      ast[\"Second Currency Code\"] +\n      \" \" +\n      renderFloat(ast[\"Rate\"])\n    );\n  }\n\n  function renderType(\n    label: string,\n    value?: TypeMapperReturn,\n    index?: number\n  ): JSX.Element {\n    return (\n      <React.Fragment key={index + label + value}>\n        <OverlayTrigger\n          placement=\"left\"\n          overlay={\n            <Tooltip id={label}>{TOOLTIPS[label] || \"No information\"}</Tooltip>\n          }\n        >\n          <Col as=\"dt\" xs={5}>\n            {label}\n          </Col>\n        </OverlayTrigger>\n        <Col as=\"dd\" xs={7}>\n          {value}\n        </Col>\n      </React.Fragment>\n    );\n  }\n\n  function renderIdentification(name = \"\"): JSX.Element[] {\n    return name.split(\"\\n\").map((item: string, i: number) => {\n      return <p key={i}>{item}</p>;\n    });\n  }\n\n  function renderCustomField(\n    type: string,\n    option: string,\n    name: string,\n    mapper: TypeMapper\n  ): JSX.Element[] {\n    const fields = findTypes(props.parsedSwift, type, option);\n\n    return fields.map((field: Block4) => {\n      return renderType(name, mapper(field.ast));\n    });\n  }\n\n  function renderField(\n    type: string,\n    option: string | undefined,\n    mapper: TypeMapper\n  ): JSX.Element[] {\n    const fields = findTypes(props.parsedSwift, type, option);\n\n    return fields.map((field: Block4) => {\n      return renderType(\n        FIELDS_DESCRIPTION[[type, option].join(\"\")],\n        mapper(field.ast)\n      );\n    });\n  }\n\n  function renderCurrencyField(): JSX.Element[] {\n    const { type, option } = TYPES[\"Currency\"];\n    const types = findTypes(props.parsedSwift, type, option);\n\n    return types.map((type: Block4) => {\n      return renderType(\n        type.ast[\"Qualifier\"] || \"\",\n        renderCurrency(\n          type.ast[\"Amount\"],\n          type.ast[\"Currency\"] || type.ast[\"Currency Code\"]\n        )\n      );\n    });\n  }\n\n  function renderDates(): JSX.Element[] {\n    const { type, option } = TYPES[\"Dates\"];\n    const types = findTypes(props.parsedSwift, type, option);\n\n    return types.map((type: Block4, index: number) => {\n      const date = moment(type.ast[\"Date\"], \"YYYYMMDD\");\n      return renderType(\n        type.ast[\"Qualifier\"] || \"\",\n        date.format(\"DD/MM/YYYY\") + \" (\" + date.fromNow() + \")\",\n        index\n      );\n    });\n  }\n\n  function renderAccountsNumber(): JSX.Element {\n    const { type, option } = TYPES[\"Account number\"];\n    const types = findTypes(props.parsedSwift, type, option);\n\n    return (\n      <React.Fragment>\n        {types.map((type: Block4, index: number) => {\n          return renderType(\n            \"Account Number (\" + type.ast[\"Qualifier\"] + \")\",\n            type.ast[\"Account Number\"],\n            index\n          );\n        })}\n      </React.Fragment>\n    );\n  }\n\n  return (\n    <Row as=\"dl\">\n      {renderAccountsNumber()}\n      {renderCurrencyField()}\n      {renderDates()}\n      {renderCustomField(\"83\", \"J\", \"Fund number\", (ast: SwiftAST) => {\n        return getAccountNumberFromFin(ast);\n      })}\n      {renderCustomField(\"58\", \"J\", \"Nostro number\", (ast: SwiftAST) => {\n        return getAccountNumberFromFin(ast);\n      })}\n      {renderField(\"92\", \"B\", (ast: SwiftAST) => {\n        return renderRate(ast);\n      })}\n      {renderField(\"20\", undefined, (ast: SwiftAST) => {\n        return ast[\"Value\"] || \"\";\n      })}\n      {renderField(\"83\", \"J\", (ast: SwiftAST) => {\n        return renderIdentification(ast[\"Party Identification\"]);\n      })}\n      {renderField(\"30\", \"T\", (ast: SwiftAST) => {\n        return renderDate(ast[\"Date\"]);\n      })}\n      {renderField(\"30\", \"V\", (ast: SwiftAST) => {\n        return renderDate(ast[\"Date\"]);\n      })}\n      {renderField(\"36\", undefined, (ast: SwiftAST) => {\n        return renderFloat(ast[\"Rate\"]);\n      })}\n      {renderField(\"32\", \"B\", (ast: SwiftAST) => {\n        return renderCurrency(ast[\"Amount\"], ast[\"Currency\"]);\n      })}\n      {renderField(\"33\", \"B\", (ast: SwiftAST) => {\n        return renderCurrency(ast[\"Amount\"], ast[\"Currency\"]);\n      })}\n      {renderField(\"53\", \"A\", (ast: SwiftAST) => {\n        return ast[\"Identifier Code\"] || \"\";\n      })}\n      {renderField(\"58\", \"J\", (ast: SwiftAST) => {\n        return renderIdentification(ast[\"Party Identification\"]);\n      })}\n    </Row>\n  );\n}\n\nexport default Details;\n","import React, { useState } from \"react\";\nimport \"moment/locale/pl\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Validator from \"./Validator\";\nimport \"./assets/css/App.css\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport Details from \"./Details\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport {\n  darcula,\n  duotoneDark,\n  solarizedlight\n} from \"react-syntax-highlighter/dist/esm/styles/prism\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport {\n  findType,\n  parse,\n  ParsedSwift,\n  renderCurrency,\n  useAccountInput\n} from \"./utils\";\nimport JSONPretty from \"react-json-pretty\";\nimport Badge from \"react-bootstrap/Badge\";\n\ninterface ValidatorWizardState {\n  orders: ParsedSwift[];\n  ordersRaw: string[];\n  currentOrderRaw: string;\n  currentOrder: ParsedSwift;\n  orderRaw: string;\n  transactionJSON: ParsedSwift;\n  transactions: string[];\n  transactionRaw: string;\n  orderJSON: ParsedSwift;\n  currentOrderIndex: number;\n  refDate: string;\n  number: number;\n}\n\nfunction ValidatorWizard(): JSX.Element {\n  const [state, setState] = useState<ValidatorWizardState>({\n    orders: [],\n    ordersRaw: [],\n    currentOrderRaw: \"\",\n    currentOrder: {} as ParsedSwift,\n    orderRaw: \"\",\n    transactionJSON: {} as ParsedSwift,\n    transactions: [],\n    transactionRaw: \"\",\n    orderJSON: {} as ParsedSwift,\n    currentOrderIndex: 0,\n    refDate: \"\",\n    number: 0\n  });\n\n  const accounts = useAccountInput([]);\n  const [validOrders, setValidOrders] = useState<number[]>([]);\n  const [invalidOrders, setInvalidOrders] = useState<number[]>([]);\n\n  function onTransactionChange(event: React.FormEvent<HTMLInputElement>): void {\n    const value = event.currentTarget.value || \"\";\n    const transactions = state.transactions;\n    transactions[state.currentOrderIndex] = value;\n\n    setState({\n      ...state,\n      transactionJSON: parse(value),\n      transactionRaw: value,\n      transactions: transactions\n    });\n  }\n\n  function onOrdersChange(event: React.FormEvent<HTMLInputElement>): void {\n    const value = event.currentTarget.value || \"\";\n    setState({ ...state, orderRaw: value });\n  }\n\n  function onRefChange(event: React.FormEvent<HTMLInputElement>): void {\n    const value = event.currentTarget.value || \"\";\n\n    const refDate = value.slice(0, 10);\n    const number = parseFloat(value.slice(10));\n\n    setState({\n      ...state,\n      refDate: refDate,\n      number: number\n    });\n  }\n\n  function generateWizard(): void {\n    try {\n      const orders = state.orderRaw.replace(/ :/g, \"\\n:\").split(/\\n{2,}/);\n      setState({\n        ...state,\n        orders: orders.map(parse),\n        ordersRaw: orders,\n        currentOrderRaw: orders[0],\n        currentOrder: parse(orders[0])\n      });\n    } catch (e) {\n      setState({ ...state, orders: [] });\n    }\n  }\n\n  function clearWizard(): void {\n    setState({ ...state, orders: [] });\n  }\n\n  function onOrderClick(orderIndex: number) {\n    return (): void => {\n      return setState({\n        ...state,\n        currentOrderRaw: state.ordersRaw[orderIndex],\n        currentOrder: state.orders[orderIndex],\n        currentOrderIndex: orderIndex,\n        transactionRaw: state.transactions[orderIndex] || \"\",\n        transactionJSON: parse(state.transactions[orderIndex] || \"\")\n      });\n    };\n  }\n\n  function markAsValid(orderIndex: number) {\n    return (): void => {\n      const newInvalidOrders = invalidOrders.filter((order: number) => {\n        return order !== orderIndex;\n      });\n      validOrders.push(orderIndex);\n\n      setInvalidOrders(newInvalidOrders);\n      setValidOrders(validOrders);\n    };\n  }\n\n  function markAsInvalid(orderIndex: number) {\n    return (): void => {\n      const newInvalidOrders = invalidOrders;\n      const newValidOrders = validOrders.filter((order: number) => {\n        return order !== orderIndex;\n      });\n      newInvalidOrders.push(orderIndex);\n\n      setValidOrders(newValidOrders);\n      setInvalidOrders(newInvalidOrders);\n    };\n  }\n\n  function renderInputPage(): JSX.Element {\n    return (\n      <Col className=\"m-1\">\n        <Row>\n          <Col>\n            <Form>\n              <Form.Group>\n                <Form.Control\n                  className=\"m-1\"\n                  placeholder=\"Orders\"\n                  as=\"textarea\"\n                  rows=\"10\"\n                  onChange={onOrdersChange}\n                />\n                <Form.Control\n                  className=\"m-1\"\n                  placeholder=\"First Reference\"\n                  as=\"input\"\n                  onChange={onRefChange}\n                />\n                <Form.Control\n                  className=\"m-1\"\n                  placeholder=\"Accounts\"\n                  as=\"textarea\"\n                  rows=\"10\"\n                  onChange={accounts.handleChange}\n                />\n              </Form.Group>\n            </Form>\n          </Col>\n        </Row>\n        <Row className=\"m-1\">\n          <Button variant=\"primary\" onClick={generateWizard}>\n            Generate\n          </Button>\n        </Row>\n        <Row className=\"m-1\">\n          <Col>\n            <JSONPretty data={accounts.value} />\n          </Col>\n        </Row>\n      </Col>\n    );\n  }\n\n  function renderList(): JSX.Element[] {\n    return state.orders.map((order: ParsedSwift, index: number) => {\n      const buy = findType(order, \"19\", \"B\", \"NETT\");\n      const sell = findType(order, \"19\", \"B\", \"PSTA\");\n      let buyAST, sellAST, active;\n      let variant: \"success\" | \"danger\" | undefined;\n\n      if (buy && sell) {\n        buyAST = buy.ast;\n        sellAST = sell.ast;\n        active = index === state.currentOrderIndex;\n\n        if (validOrders.includes(index)) {\n          variant = \"success\";\n        } else if (invalidOrders.includes(index)) {\n          variant = \"danger\";\n        } else {\n          variant = undefined;\n        }\n      } else {\n        return (\n          <ListGroup.Item\n            as=\"li\"\n            key={index}\n            variant=\"dark\"\n            action\n            onClick={onOrderClick(index)}\n          >\n            <Row>\n              <Col>Problem with parse</Col>\n            </Row>\n          </ListGroup.Item>\n        );\n      }\n\n      return (\n        <ListGroup.Item\n          as=\"li\"\n          key={index}\n          variant={variant}\n          active={active}\n          action\n          onClick={onOrderClick(index)}\n        >\n          <Row>\n            <Col>\n              <Badge pill variant=\"light\">\n                {\" \"}\n                {state.refDate}\n                <strong>{state.number + index + 1}</strong>{\" \"}\n              </Badge>\n            </Col>\n            <Col>\n              {renderCurrency(sellAST[\"Amount\"], sellAST[\"Currency Code\"])} /{\" \"}\n              {renderCurrency(buyAST[\"Amount\"], buyAST[\"Currency Code\"])}\n            </Col>\n            <Col xs={2}>\n              <Button variant=\"success\" onClick={markAsValid(index)}>\n                <span aria-label=\"Valid\" role=\"img\">\n                  👍\n                </span>\n              </Button>\n            </Col>\n            <Col xs={2}>\n              <Button variant=\"danger\" onClick={markAsInvalid(index)}>\n                <span aria-label=\"Invalid\" role=\"img\">\n                  👎\n                </span>\n              </Button>\n            </Col>\n          </Row>\n        </ListGroup.Item>\n      );\n    });\n  }\n  function renderWizard(): JSX.Element {\n    return (\n      <Row className=\"mt-1 ml-1 mr-1\">\n        <Col xs={4}>\n          <Col className=\"m-1\">\n            <Button variant=\"danger\" onClick={clearWizard}>\n              Clear\n            </Button>\n          </Col>\n          <Col>\n            <ListGroup as=\"ul\">{renderList()}</ListGroup>\n          </Col>\n        </Col>\n        <Col xs={7} className=\"mr-1\">\n          <Row>\n            <Col>\n              <Form>\n                <Form.Group>\n                  <Form.Control\n                    placeholder=\"Transaction\"\n                    as=\"textarea\"\n                    rows=\"10\"\n                    value={state.transactionRaw}\n                    onChange={onTransactionChange}\n                  />\n                </Form.Group>\n              </Form>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Validator\n                orderJSON={state.currentOrder}\n                transactionJSON={state.transactionJSON}\n                accounts={accounts.value}\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <hr />\n            </Col>\n          </Row>\n          <Row>\n            <Col xs={6}>\n              <Details parsedSwift={state.currentOrder} />\n            </Col>\n            <Col xs={6}>\n              <Details parsedSwift={state.transactionJSON} />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <SyntaxHighlighter language=\"javascript\" style={solarizedlight}>\n                {state.currentOrderRaw}\n              </SyntaxHighlighter>\n            </Col>\n            <Col>\n              <SyntaxHighlighter language=\"javascript\" style={darcula}>\n                {state.transactionRaw}\n              </SyntaxHighlighter>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <SyntaxHighlighter language=\"javascript\" style={duotoneDark}>\n                {state.currentOrder.toString()}\n              </SyntaxHighlighter>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    );\n  }\n\n  if (state.orders.length === 0) {\n    return renderInputPage();\n  } else {\n    return renderWizard();\n  }\n}\n\nexport default ValidatorWizard;\n","import React, { useState } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport JSONPretty from \"react-json-pretty\";\nimport Details from \"./Details\";\nimport \"./assets/css/App.css\";\nimport Validator from \"./Validator\";\nimport { parse, ParsedSwift, useAccountInput } from \"./utils\";\n\ninterface ValidatorInputState {\n  orderJSON: ParsedSwift;\n  transactionJSON: ParsedSwift;\n  mappedSwifts: ParsedSwift[];\n}\n\nfunction ValidatorInput(): JSX.Element {\n  const [state, setState] = useState<ValidatorInputState>({\n    orderJSON: {} as ParsedSwift,\n    transactionJSON: {} as ParsedSwift,\n    mappedSwifts: []\n  });\n\n  const accounts = useAccountInput([]);\n\n  function onOrderChange(event: React.FormEvent<HTMLInputElement>): void {\n    const value = event.currentTarget.value || \"\";\n    setState({ ...state, orderJSON: parse(value) });\n  }\n\n  function onTransactionChange(event: React.FormEvent<HTMLInputElement>): void {\n    const value = event.currentTarget.value || \"\";\n    setState({ ...state, transactionJSON: parse(value) });\n  }\n\n  return (\n    <Container className=\"mb-2 mt-sm-2\">\n      <Row>\n        <Col>\n          <Form>\n            <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n              <Form.Control\n                placeholder=\"Swift order\"\n                as=\"textarea\"\n                rows=\"20\"\n                onChange={onOrderChange}\n              />\n            </Form.Group>\n          </Form>\n        </Col>\n        <Col>\n          <Form>\n            <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n              <Form.Control\n                placeholder=\"Swift transaction\"\n                as=\"textarea\"\n                rows=\"20\"\n                onChange={onTransactionChange}\n              />\n            </Form.Group>\n          </Form>\n        </Col>\n      </Row>\n      <Row>\n        <Col xs={12}>\n          <Validator\n            orderJSON={state.orderJSON}\n            transactionJSON={state.transactionJSON}\n            accounts={accounts.value}\n          />\n        </Col>\n      </Row>\n      <hr className=\"col-xs-12\" />\n      <Row>\n        <Col xs={6}>\n          <Details parsedSwift={state.orderJSON} />\n        </Col>\n        <Col xs={6}>\n          <Details parsedSwift={state.transactionJSON} />\n        </Col>\n      </Row>\n      <Row>\n        <Col xs={6}>\n          <JSONPretty data={state.orderJSON} />\n        </Col>\n        <Col xs={6}>\n          <JSONPretty data={state.transactionJSON} />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Form>\n            <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n              <Form.Control\n                placeholder=\"Accounts\"\n                as=\"textarea\"\n                rows=\"5\"\n                onChange={accounts.handleChange}\n              />\n            </Form.Group>\n          </Form>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <JSONPretty data={accounts} />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default ValidatorInput;\n","import React from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport \"./assets/css/App.css\";\nimport Tab from \"react-bootstrap/Tab\";\nimport Tabs from \"react-bootstrap/Tabs\";\nimport DuplicateCheck from \"./Duplicate\";\nimport Generator from \"./Generator\";\nimport ValidatorWizard from \"./ValidatorWizard\";\nimport ValidatorInput from \"./ValidatorInput\";\n\nfunction App(): JSX.Element {\n  return (\n    <div>\n      <Navbar bg=\"dark\" variant=\"dark\" className=\"mb-2\">\n        <Navbar.Brand href=\"#home\">{\"Swift Validator\"}</Navbar.Brand>\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"./static.html\">Static Version</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n        <Navbar.Collapse className=\"justify-content-end\">\n          <Navbar.Text>\n            Version: <strong>{process.env.REACT_APP_GIT_SHA}</strong>\n          </Navbar.Text>\n        </Navbar.Collapse>\n      </Navbar>\n      <Tabs defaultActiveKey=\"home\" id=\"uncontrolled-tab-example\">\n        <Tab eventKey=\"home\" title=\"Validator\">\n          <ValidatorInput />\n        </Tab>\n        <Tab eventKey=\"duplicate\" title=\"Duplicate check\">\n          <DuplicateCheck />\n        </Tab>\n        <Tab eventKey=\"generator\" title=\"Order generator\">\n          <Generator />\n        </Tab>\n        <Tab eventKey=\"validatorWizard\" title=\"Validator wizard\">\n          <ValidatorWizard />\n        </Tab>\n      </Tabs>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/css/index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"react-json-pretty/themes/monikai.css\";\nimport \"react-bootstrap-table/dist/react-bootstrap-table-all.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}